/**
 * @file encoder.h
 * @date 13/3/2020	18/13/2020
 * @brief Encoder header
 */

#ifndef JC_ENCODER_H
#define JC_ENCODER_H

#ifndef _

#define MASTER_METADATA_X    6
#define MASTER_METADATA_Y    1

#define MASTER_METADATA_PART1_LENGTH 6            //master metadata part 1 encoded length
#define MASTER_METADATA_PART2_LENGTH 38            //master metadata part 2 encoded length
#define MASTER_METADATA_PART1_MODULE_NUMBER 4    //the number of modules used to encode master metadata part 1

#endif

/**
 * @brief 系统调色盘（8种颜色供您选用）
*/
static const BYTE J_Default_Palette[] = {   0,      0, 		0, 		//0: 黑 / black
                                            0,      0, 		255, 	//1: 蓝 / blue
                                            0,      255,	0,		//2: 绿 / green
                                            0,      255, 	255,	//3: 蓝绿 / cyan
                                            255,    0,		0,		//4: 红 / red
                                            255,    0, 		255,	//5: 洋红 / magenta
                                            255,	255,	0,		//6: 黄 / yellow
                                            255,	255,	255		//7: 白 / white
                                        };

/**
 * @brief 在master symbol中色盘放置位置
*/
static const Int32 master_palette_placement_index[4][8] = {{0, 3, 5, 6, 1, 2, 4, 7}, {0, 6, 5, 3, 1, 2, 4, 7},
														{6, 0, 5, 3, 1, 2, 4, 7}, {3, 0, 5, 6, 1, 2, 4, 7}};


/**
 * @brief FP的颜色编号（缺省颜色模式）
*/
#define	FP0_CORE_COLOR	0
#define	FP1_CORE_COLOR	0
#define	FP2_CORE_COLOR	6
#define	FP3_CORE_COLOR	3

/**
 * @brief AP的颜色编号（缺省颜色模式）
*/
#define	AP0_CORE_COLOR	3
#define	AP1_CORE_COLOR	3
#define	AP2_CORE_COLOR	3
#define	AP3_CORE_COLOR	3
#define APX_CORE_COLOR	6

/**
 * @brief 所有颜色模式中，FP的颜色编号
*/
static const BYTE fp0_core_color_index[] = {0, 0, FP0_CORE_COLOR, 0, 0, 0, 0, 0};
static const BYTE fp1_core_color_index[] = {0, 0, FP1_CORE_COLOR, 0, 0, 0, 0, 0};
static const BYTE fp2_core_color_index[] = {0, 2, FP2_CORE_COLOR, 14, 30, 60, 124, 252};
static const BYTE fp3_core_color_index[] = {0, 3, FP3_CORE_COLOR, 3, 7, 15, 15, 31};
/**
 * @brief 所有颜色模式中，AP的颜色编号
*/
static const BYTE apn_core_color_index[] = {0, 3, AP0_CORE_COLOR, 3, 7, 15, 15, 31};
static const BYTE apx_core_color_index[] = {0, 2, APX_CORE_COLOR, 14, 30, 60, 124, 252};

/**
 * @brief FP种类
*/
#define FP0		0
#define FP1		1
#define FP2		2
#define FP3		3

/**
 * @brief AP种类
*/
#define AP0	0
#define AP1	1
#define AP2	2
#define AP3	3
#define APX	4

/**
 * @brief J_Code对象
*/
typedef struct {
	Int32 		dimension;				///<Module size in pixel
	Vector2D	code_size;				///<Code size in symbol
	Int32 		min_x;
	Int32 		min_y;
	Int32		rows;
	Int32 		cols;
	Int32*		row_height;
	Int32*		col_width;
}J_Code;

/**
 * @brief 已被优化：解码顺序
*/
static const Vector2D j_symbol_pos[MAX_SYMBOL_NUMBER] =
{ 	{0, 0}   };


/**
 * @brief Nc 颜色
*/
static const BYTE nc_color_encode_table[8][2] = {{0,0}, {0,3}, {0,6}, {3,0}, {3,3}, {3,6}, {6,0}, {6,3}};

/**
 * @brief 编码表 / Encoding table（256x6）
 * 按照ASCII索引，列表示在该模式下的编码数值，而若是-1，则表示该模式不可编码此内容
*/
static const Int32 j_enconing_table[MAX_SIZE_ENCODING_MODE][J_ENCODING_MODES]=
        {{-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,16,-1},
         {-1,-1,-1,-1,17,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-19,-1},{-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, { 0, 0, 0,-1,-1, 0}, {-1,-1,-1, 0,-1,-1}, {-1,-1,-1, 1,-1,-1},
         {-1,-1,-1,-1, 0,-1}, {-1,-1,-1, 2,-1,-1}, {-1,-1,-1, 3,-1,-1}, {-1,-1,-1, 4,-1,-1}, {-1,-1,-1, 5,-1,-1},
         {-1,-1,-1, 6,-1,-1}, {-1,-1,-1, 7,-1,-1}, {-1,-1,-1,-1, 1,-1}, {-1,-1,-1,-1, 2,-1}, {-1,-1,11, 8,-20,-1},
         {-1,-1,-1, 9,-1,-1}, {-1,-1,12,10,-21,-1}, {-1,-1,-1,11,-1,-1},{-1,-1, 1,-1,-1, 1}, {-1,-1, 2,-1,-1, 2},
         {-1,-1, 3,-1,-1, 3}, {-1,-1, 4,-1,-1, 4}, {-1,-1, 5,-1,-1, 5}, {-1,-1, 6,-1,-1, 6}, {-1,-1, 7,-1,-1, 7},
         {-1,-1, 8,-1,-1, 8}, {-1,-1, 9,-1,-1, 9}, {-1,-1,10,-1,-1,10}, {-1,-1,-1,12,-22,-1}, {-1,-1,-1,13,-1,-1},
         {-1,-1,-1,-1, 3,-1}, {-1,-1,-1,-1, 4,-1}, {-1,-1,-1,-1, 5,-1}, {-1,-1,-1,14,-1,-1}, {-1,-1,-1,15,-1,-1},
         { 1,-1,-1,-1,-1,11}, { 2,-1,-1,-1,-1,12}, { 3,-1,-1,-1,-1,13}, { 4,-1,-1,-1,-1,14}, { 5,-1,-1,-1,-1,15},
         { 6,-1,-1,-1,-1,16}, { 7,-1,-1,-1,-1,17}, { 8,-1,-1,-1,-1,18}, { 9,-1,-1,-1,-1,19}, { 10,-1,-1,-1,-1,20},
         {11,-1,-1,-1,-1,21}, {12,-1,-1,-1,-1,22}, {13,-1,-1,-1,-1,23}, {14,-1,-1,-1,-1,24}, {15,-1,-1,-1,-1,25},
         {16,-1,-1,-1,-1,26}, {17,-1,-1,-1,-1,27}, {18,-1,-1,-1,-1,28}, {19,-1,-1,-1,-1,29}, {20,-1,-1,-1,-1,30},
         {21,-1,-1,-1,-1,31}, {22,-1,-1,-1,-1,32}, {23,-1,-1,-1,-1,33}, {24,-1,-1,-1,-1,34}, {25,-1,-1,-1,-1,35},
         {26,-1,-1,-1,-1,36}, {-1,-1,-1,-1, 6,-1}, {-1,-1,-1,-1, 7,-1}, {-1,-1,-1,-1, 8,-1}, {-1,-1,-1,-1, 9,-1},
         {-1,-1,-1,-1,10,-1}, {-1,-1,-1,-1,11,-1}, {-1, 1,-1,-1,-1,37}, {-1, 2,-1,-1,-1,38}, {-1, 3,-1,-1,-1,39},
         {-1, 4,-1,-1,-1,40}, {-1, 5,-1,-1,-1,41}, {-1, 6,-1,-1,-1,42}, {-1, 7,-1,-1,-1,43}, {-1, 8,-1,-1,-1,44},
         {-1, 9,-1,-1,-1,45}, {-1,10,-1,-1,-1,46}, {-1,11,-1,-1,-1,47}, {-1,12,-1,-1,-1,48}, {-1,13,-1,-1,-1,49},
         {-1,14,-1,-1,-1,50}, {-1,15,-1,-1,-1,51}, {-1,16,-1,-1,-1,52}, {-1,17,-1,-1,-1,53}, {-1,18,-1,-1,-1,54},
         {-1,19,-1,-1,-1,55}, {-1,20,-1,-1,-1,56}, {-1,21,-1,-1,-1,57}, {-1,22,-1,-1,-1,58}, {-1,23,-1,-1,-1,59},
         {-1,24,-1,-1,-1,60}, {-1,25,-1,-1,-1,61}, {-1,26,-1,-1,-1,62}, {-1,-1,-1,-1,12,-1}, {-1,-1,-1,-1,13,-1},
         {-1,-1,-1,-1,14,-1}, {-1,-1,-1,-1,15,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,23,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,24,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,25,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,26,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,27,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,28,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,29,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,30,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,31,-1}, {-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1},
         {-1,-1,-1,-1,-1,-1}};

/**
 * @brief Switch mode length
*/
static const Int32 latch_shift_to[14][14]=
        {{0,5,5,ENC_MAX,ENC_MAX,5,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,5,7,ENC_MAX,11},
         {7,0,5,ENC_MAX,ENC_MAX,5,ENC_MAX,5,ENC_MAX,ENC_MAX,5,7,ENC_MAX,11},
         {4,6,0,ENC_MAX,ENC_MAX,9,ENC_MAX,6,ENC_MAX,ENC_MAX,4,6,ENC_MAX,10},
         {ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,0,0,0,ENC_MAX,ENC_MAX,0,ENC_MAX},
         {ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,0,0,0,ENC_MAX,ENC_MAX,0,ENC_MAX},
         {8,13,13,ENC_MAX,ENC_MAX,0,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,8,8,ENC_MAX,12},
         {ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,0,0,0,0,ENC_MAX,ENC_MAX,0,0},
         {0,5,5,ENC_MAX,ENC_MAX,5,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,5,7,ENC_MAX,11},
         {7,0,5,ENC_MAX,ENC_MAX,5,ENC_MAX,5,ENC_MAX,ENC_MAX,5,7,ENC_MAX,11},
         {4,6,0,ENC_MAX,ENC_MAX,9,ENC_MAX,6,ENC_MAX,ENC_MAX,4,6,ENC_MAX,10},
         {ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,0,0,0,ENC_MAX,ENC_MAX,0,ENC_MAX},
         {ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,0,0,0,ENC_MAX,ENC_MAX,0,ENC_MAX},
         {8,13,13,ENC_MAX,ENC_MAX,0,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,8,8,ENC_MAX,12},
         {ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,ENC_MAX,0,0,0,0,ENC_MAX,ENC_MAX,0,0}};//First latch then shift

//Encoding is based on following mode order:
//1.upper, 2.lower, 3.numeric, 4.punct, 5.mixed, 6.alphanumeric, 7.byte
/**
 * @brief 各模式之bit大小
*/
static const Int32 character_size[7] = {5,5,4,4,5,6,8};

/**
 * @brief 切换模式标记
*/
static const Int32 mode_switch[7][16]=
        {{-1,28,29,-1,-1,30,-1,-1,-1,-1,27,125,-1,124,126,-1},		//from upper case mode to all other modes; -1 indicates not possible mode switch
         {126,-1,29,-1,-1,30,-1,28,-1,127,27,125,-1,124,-1,127},	//lower case mode
         {14,63,-1,-1,-1,478,-1,62,-1,-1,13,61,-1,60,-1,-1},		//numeric mode
         {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},			//punctuation mode
         {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},			//mixed mode
         {255,8188,8189,-1,-1,-1,-1,-1,-1,-1,254,253,-1,252,-1,-1},	//alphanumeric
         {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}};		//byte mode


/**
 * @brief 所有ECC等级下的编码率
*/
static const Float ecclevel2coderate[11] = {0.55f, 0.63f, 0.57f, 0.55f, 0.50f, 0.43f, 0.34f, 0.25f, 0.20f, 0.17f, 0.14f};

/**
 * @brief 每个ECC水平对应的 wc 及 wr，供LDPC使用
*/
static const Int32 ecclevel2wcwr[11][2] = {
    {4, 9}, {3, 8}, {3, 7}, {4, 9}, {3, 6}, {4, 7}, {4, 6}, {3, 4}, {4, 5}, {5, 6}, {6, 7}
};

/**
 * @brief FP/AP位置
*/
static const Int32 j_ap_pos[32][9] = { {4, 18, 0, 0, 0, 0, 0, 0, 0},
										{4, 22, 0, 0, 0, 0, 0, 0, 0},
										{4, 26, 0, 0, 0, 0, 0, 0, 0},
										{4, 30, 0, 0, 0, 0, 0, 0, 0},
										{4, 34, 0, 0, 0, 0, 0, 0, 0},
										{4, 17, 38, 0, 0, 0, 0, 0, 0},
											 {4, 20, 42, 0, 0, 0, 0, 0, 0},
											 {4, 23, 46, 0, 0, 0, 0, 0, 0},
											 {4, 26, 50, 0, 0, 0, 0, 0, 0},
											 {4, 14, 32, 54, 0, 0, 0, 0, 0},
											 {4, 17, 39, 58, 0, 0, 0, 0, 0},
											 {4, 20, 46, 62, 0, 0, 0, 0, 0},
											 {4, 23, 44, 66, 0, 0, 0, 0, 0},
											 {4, 26, 37, 51, 70, 0, 0, 0, 0},
											 {4, 14, 36, 58, 74, 0, 0, 0, 0},
											 {4, 17, 39, 56, 78, 0, 0, 0, 0},
											 {4, 20, 42, 63, 82, 0, 0, 0, 0},
											 {4, 23, 38, 54, 70, 86, 0, 0, 0},
											 {4, 26, 38, 56, 77, 90, 0, 0, 0},
											 {4, 14, 33, 53, 72, 94, 0, 0, 0},
											 {4, 17, 38, 59, 79, 98, 0, 0, 0},
											 {4, 20, 36, 53, 70, 86, 102, 0, 0},
											 {4, 23, 36, 55, 74, 93, 106, 0, 0},
											 {4, 26, 36, 58, 79, 100, 110, 0, },
											 {4, 14, 36, 58, 80, 92, 114, 0, 0},
											 {4, 17, 34, 52, 70, 88, 99, 118, 0},
											 {4, 20, 37, 54, 72, 89, 106, 122, 0},
											 {4, 23, 38, 56, 74, 92, 113, 126, 0},
											 {4, 26, 36, 58, 78, 98, 120, 130, 0},
											 {4, 14, 32, 49, 67, 84, 102, 112, 134},
											 {4, 17, 35, 53, 71, 89, 107, 119, 138},
											 {4, 20, 38, 55, 73, 91, 108, 126, 142}
										   };
/**
 * @brief Number of finder/alignment patterns on row/column (side-version 1-32)
*/
static const Int32 j_ap_num[32] = {2, 2, 2, 2, 2,
										 3, 3, 3, 3,
										 4, 4, 4, 4,
										 5, 5, 5, 5,
										 6, 6, 6, 6,
										 7, 7, 7, 7,
										 8, 8, 8, 8,
										 9, 9, 9};

extern void interleaveData(J_Data* data);
extern Int32 maskCode(J_Encode* enc, J_Code* cp);
extern void maskSymbols(J_Encode* enc, Int32 mask_type, Int32* masked, J_Code* cp);
extern void getNextMetadataModuleInMaster(Int32 matrix_height, Int32 matrix_width, Int32 next_module_count, Int32* x, Int32* y);
extern J_Encode* createEncode(Int32 color_number, Int32 symbol_number);
extern Int32 generateJCode(J_Encode* enc, J_Data* data);
extern void destroyEncode(J_Encode* enc);
extern Bitmap* destroyAndExtractBitmapFromEncode(J_Encode* enc);
extern Boolean saveImage(Bitmap* bitmap, Char* filename);

#endif
